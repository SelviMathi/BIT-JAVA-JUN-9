A generic class in Java lets you write code that can work with any data type, using a type parameter like <T>.

You write the class only once, and it works for any type (Integer, String, Float, etc.).

Example:
Box<Integer> intBox = new Box<>();
Box<String> strBox = new Box<>();

class Container<T> {
    private T value;

    public void setValue(T value) {
        this.value = value;
    }

    public T getValue() {
        return value;
    }
}

public class Main {
    public static void main(String[] args) {
        Container<String> nameBox = new Container<>();
        nameBox.setValue("Sweety");

        Container<Integer> marksBox = new Container<>();
        marksBox.setValue(88);

        Container<Double> priceBox = new Container<>();
        priceBox.setValue(150.5);

        System.out.println("Name  : " + nameBox.getValue());
        System.out.println("Marks : " + marksBox.getValue());
        System.out.println("Price : â‚¹" + priceBox.getValue());
    }
}

class Array<T> {
    private T[] arr;
    private int arr_size;

    Array(int noe) {
        arr = (T[]) new Object[noe];
        arr_size = noe;
    }

    void add(int i, T v) {
        arr[i] = v;
    }

    void dis() {
        for (int i = 0; i < arr_size; i++)
            System.out.print(arr[i] + " ");
    }

    void insert(int index, T value) {
        arr_size++;
        T[] temp = (T[]) new Object[arr_size];
        int copyInd;
        for (copyInd = 0; copyInd < index; copyInd++)
            temp[copyInd] = arr[copyInd];
        temp[index] = value;
        for (copyInd = index + 1; copyInd < arr_size; copyInd++)
            temp[copyInd] = arr[copyInd - 1];
        arr = temp;
    }

    public void delete(int index) {
        for (int i = index; i < arr_size - 1; i++) {
            arr[i] = arr[i + 1];
        }
        arr[arr_size - 1] = null;
        arr_size--;
    }

    void print() {
        System.out.print("[");
        int ind;
        for (ind = 0; ind < arr.length - 1; ind++) {
            if (arr[ind] == null)
                System.out.print(0 + ",");
            else
                System.out.print(arr[ind] + ",");
        }
        if (arr[ind] == null)
            System.out.print(0);
        else
            System.out.print(arr[ind]);
        System.out.println("]");
    }

    int search(T value) {
        int src_ind;
        for (src_ind = 0; src_ind < arr_size; src_ind++)
            if (arr[src_ind] == value)
                return src_ind;
        return -1;
    }
}

class ArrayTester {
    public static void main(String[] args) {
        Array<Integer> arr_int = new Array<Integer>(20);
        for (int arr_int_ind = 0; arr_int_ind < 19; arr_int_ind++)
            arr_int.add(arr_int_ind, arr_int_ind + 1);
        arr_int.print();
        arr_int.insert(10, 111);
        arr_int.print();
        arr_int.insert(6, 222);
        arr_int.print();
        int indexAt = arr_int.search(111);
        System.out.println(indexAt);

        Array<Boolean> bl_arr = new Array<Boolean>(10);
        bl_arr.print();

        Array<Double> dbl_arr = new Array<Double>(5);
        for (int ind = 0; ind < 5; ind++)
            dbl_arr.add(ind, (ind + 1) / 1.0);
        dbl_arr.print();
        dbl_arr.insert(3, 3.14);
        dbl_arr.print();
        Double d = 0.0;
        System.out.println(d);
    }
}